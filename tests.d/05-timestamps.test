#!/bin/bash -x
#
# This now just tests mtime, since it appears nothing else makes sense.

max_priority () {
    echo $Critical
}

# Args:
#   $1: a new directory where you should create your files
create () {
    cd $1

    touch some-file
    mkdir some-dir
    #ln -s some-file some-symlink
    ln some-file some-hardlink

    # Set the mtime
    touch -m -t 201001010101 some-file
    touch -m -t 201001010101 some-dir
    #touch -m -t 201001010101 some-symlink
    touch -m -t 201001010101 some-hardlink

    # Set the atime
    touch -a -t 201001010102 some-file
    touch -a -t 201001010102 some-dir
    #touch -a -t 201001010102 some-symlink
    touch -a -t 201001010102 some-hardlink

}

# comparing atime is probably silly.
compare-atime () {
    test "`stat -f '%a' $1`" = "`stat -f '%a' $2`"
}

compare-mtime () {
    test "`stat -f '%m' $1`" = "`stat -f '%m' $2`"
}

# comparing ctime is also surely quite silly
compare-ctime () {
    test "`stat -f '%c' $1`" = "`stat -f '%c' $2`"
}


# Args:
#   $1 & $2: Two files.  You should fail if the property of interest differs
#            between them.  For example, if you are testing permissions,
#            compare should fail if the files have different permissions.
#
# Note: You should NOT assume that this file was produced by your create
#   function.  This should be a general test.  You should be able to handle
#   files that don't posess the property of interest at all without failing.
#   You should also do your best to only test a single property (or group
#   of properties) so that the meaning of a failure is clear.
compare () {
    test -e $1 \
    && test -e $2 \
    && compare-mtime $1 $2 \
    && compare-ctime $1 $2
}

# Args:
#   $1: the copied directory
#   $2: the original directory (where create was run)
#
# This should fail if it detects that the copy was not faithful.
verify () {
    cd $1

    #begin-subtests

    # The atime usually gets changed on the *source* file by the act of
    # copying it, so it's not very useful to test it.  And really, who cares
    # about atime?  ;^)
    # compare-atime ./some-file $2/some-file \
    # && compare-atime ./some-dir $2/some-dir \
    # && compare-atime ./some-hardlink $2/some-hardlink \
    # #&& compare-atime ./some-symlink $2/some-symlink
    # t1=$?
    # subtest "access time" $t1

    compare-mtime ./some-file $2/some-file \
    && compare-mtime ./some-dir $2/some-dir \
    && compare-mtime ./some-hardlink $2/some-hardlink \
    #&& compare-mtime ./some-symlink $2/some-symlink
    #t2=$?
    #subtest "modification time" $t2

    # I guess ctime can't be set intentionally, so don't test for it.
    # compare-ctime ./some-file $2/some-file \
    # && compare-ctime ./some-dir $2/some-dir \
    # && compare-ctime ./some-hardlink $2/some-hardlink \
    # #&& compare-ctime ./some-symlink $2/some-symlink
    # t3=$?
    # subtest "creation time" $t3

    #alltrue $t1 $t2 $t3
    #return $t2
}

# Args: none
# Treating the working directory as though your create function had been
# run there, perform any necessary operations to allow 'sudo rm -rf' to succeed.
# For example, unlock any locked files.
clean () {
    true
}
